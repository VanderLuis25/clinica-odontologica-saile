import express from 'express';
import Procedimento from '../models/Procedimento.js';
import Clinica from '../models/Clinica.js'; // Importar Clinica
import Financeiro from '../models/Financeiro.js'; // üí° Importar o modelo Financeiro
import User from '../models/User.js'; // üí° Importar User para buscar dados do funcion√°rio

const router = express.Router();

// 1. ROTA GET: Listar todos os procedimentos
router.get('/', async (req, res) => {
    try {
        // üí° ATUALIZA√á√ÉO: Filtro rigoroso por cl√≠nica.
        const filtro = {};

        if (req.usuario.perfil === 'patrao') {
            const clinicaId = req.headers['x-clinic-id'];
            // Se uma cl√≠nica espec√≠fica for selecionada, filtra por ela.
            // Se n√£o, o filtro fica vazio e busca de TODAS as cl√≠nicas.
            if (clinicaId) filtro.clinica = clinicaId;
        } else if (req.usuario.perfil === 'funcionario') {
            const funcionarioLogado = await User.findById(req.usuario.id);
            if (funcionarioLogado && funcionarioLogado.clinica) {
                filtro.clinica = funcionarioLogado.clinica;
            } else {
                return res.json([]);
            }
        }

        // üí° CORRE√á√ÉO CR√çTICA: Uso de .populate('paciente')
        // Isso garante que o campo 'paciente' n√£o retorne apenas o ID, mas o objeto completo do paciente,
        // permitindo que o frontend acesse p.paciente.nome e p.paciente.cpf
        const procedimentos = await Procedimento.find(filtro).populate('paciente').populate('clinica', 'nome');
        res.json(procedimentos);
    } catch (err) {
        res.status(500).json({ message: 'Erro ao buscar procedimentos', error: err.message });
    }
});

// 2. ROTA POST: Criar novo procedimento (N√ÉO MUDOU)
router.post('/', async (req, res) => {
    try {
        let clinicaId;

        // ‚úÖ CORRE√á√ÉO: Garante que a cl√≠nica seja a do funcion√°rio logado.
        if (req.usuario.perfil === 'funcionario') {
            const funcionarioLogado = await User.findById(req.usuario.id);
            clinicaId = funcionarioLogado?.clinica;
        } else {
            // Para o patr√£o, continua usando o cabe√ßalho.
            clinicaId = req.headers['x-clinic-id'];
        }

        if (!clinicaId) return res.status(400).json({ message: "O usu√°rio n√£o est√° associado a nenhuma cl√≠nica." });

        const novoProcedimento = new Procedimento({
            ...req.body,
            clinica: clinicaId // Associa √† cl√≠nica correta.
        });
        await novoProcedimento.save();
        
        // üí° Melhoria: Popula o paciente no procedimento rec√©m-criado para obter os dados
        const procedimentoRetorno = await Procedimento.findById(novoProcedimento._id).populate('paciente', 'nome cpf');
        
        // üí° L√ìGICA ATUALIZADA: Criar registro financeiro correspondente com todos os dados
        if (procedimentoRetorno && procedimentoRetorno.valor > 0) {
            const registroFinanceiro = new Financeiro({
                descricao: `Procedimento: ${procedimentoRetorno.nome}`,
                valor: procedimentoRetorno.valor,
                tipo: 'receita',
                data: new Date().toISOString().split('T')[0], // Usa a data atual
                statusPagamento: 'pendente',
                clinica: clinicaId, // ‚úÖ Adiciona a cl√≠nica ao registro financeiro
                procedimento: procedimentoRetorno._id, // Vincula ao procedimento
                // ‚úÖ CORRE√á√ÉO: Pega os dados do paciente populado
                nomePaciente: procedimentoRetorno.paciente?.nome, 
                cpfPaciente: procedimentoRetorno.paciente?.cpf,
            });
            await registroFinanceiro.save();
        }
        
        // Retorna o procedimento j√° populado para o frontend
        
        res.status(201).json(procedimentoRetorno);
    } catch (error) {
        console.error('Erro ao criar procedimento (Mongoose):', error); 
        
        if (error.name === 'ValidationError') {
            const messages = Object.values(error.errors).map(val => val.message).join(', ');
            return res.status(400).json({ 
                message: `Erro de Valida√ß√£o: ${messages}`, 
                error: error.message 
            });
        }
        
        res.status(500).json({ message: 'Erro ao criar procedimento.', error: error.message });
    }
});


// 3. ROTA PUT: Atualizar procedimento por ID
router.put('/:id', async (req, res) => {
    try {
        // ‚úÖ IN√çCIO DA VERIFICA√á√ÉO DE SEGURAN√áA
        if (req.usuario.perfil === 'funcionario') {
            const procedimento = await Procedimento.findById(req.params.id);
            if (!procedimento) {
                return res.status(404).json({ message: 'Procedimento n√£o encontrado.' });
            }

            const funcionarioLogado = await User.findById(req.usuario.id);
            // Verifica se o procedimento pertence √† cl√≠nica do funcion√°rio
            if (procedimento.clinica.toString() !== funcionarioLogado.clinica.toString()) {
                return res.status(403).json({ message: 'Acesso negado. Voc√™ n√£o tem permiss√£o para alterar este procedimento.' });
            }
        }
        // ‚úÖ FIM DA VERIFICA√á√ÉO DE SEGURAN√áA

        // Popula o campo 'paciente' ap√≥s a atualiza√ß√£o
        const procedimentoAtualizado = await Procedimento.findByIdAndUpdate(
            req.params.id, 
            req.body, 
            { new: true, runValidators: true }
        ).populate('paciente'); // üí° Popula o paciente aqui tamb√©m!
        
        if (!procedimentoAtualizado) return res.status(404).json({ message: 'Procedimento n√£o encontrado.' });
        res.status(200).json(procedimentoAtualizado);
    } catch (error) {
        res.status(400).json({ message: 'Erro ao atualizar procedimento.', error: error.message });
    }
});

// 4. ROTA DELETE: Excluir procedimento por ID (N√ÉO MUDOU)
router.delete('/:id', async (req, res) => {
    try {
        // ‚úÖ IN√çCIO DA VERIFICA√á√ÉO DE SEGURAN√áA
        if (req.usuario.perfil === 'funcionario') {
            const procedimento = await Procedimento.findById(req.params.id);
            if (!procedimento) {
                return res.status(404).json({ message: 'Procedimento n√£o encontrado.' });
            }

            const funcionarioLogado = await User.findById(req.usuario.id);
            // Verifica se o procedimento pertence √† cl√≠nica do funcion√°rio
            if (procedimento.clinica.toString() !== funcionarioLogado.clinica.toString()) {
                return res.status(403).json({ message: 'Acesso negado. Voc√™ n√£o tem permiss√£o para excluir este procedimento.' });
            }
        }
        // ‚úÖ FIM DA VERIFICA√á√ÉO DE SEGURAN√áA

        const procedimentoDeletado = await Procedimento.findByIdAndDelete(req.params.id);
        if (!procedimentoDeletado) return res.status(404).json({ message: 'Procedimento n√£o encontrado.' });
        res.status(200).json({ message: 'Procedimento exclu√≠do com sucesso.' });
    } catch (error) {
        res.status(500).json({ message: 'Erro ao excluir procedimento.', error: error.message });
    }
});

export default router;