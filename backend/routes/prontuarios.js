import express from "express";
import Prontuario from "../models/Prontuario.js";
import Clinica from '../models/Clinica.js'; // Importar Clinica
import User from '../models/User.js'; // Importar User para filtro de funcion√°rio

const router = express.Router();

// GET: Buscar todos os prontu√°rios
router.get("/", async (req, res) => {
  try {
    // üí° ATUALIZA√á√ÉO: Filtro rigoroso por cl√≠nica.
    const filtro = {};

    if (req.usuario.perfil === 'patrao') {
        const clinicaId = req.headers['x-clinic-id'];
        // Se uma cl√≠nica espec√≠fica for selecionada, filtra por ela.
        // Se n√£o (Vis√£o Geral), o filtro fica vazio e busca de TODAS as cl√≠nicas.
        if (clinicaId) filtro.clinica = clinicaId;

    } else if (req.usuario.perfil === 'funcionario') {
        const funcionarioLogado = await User.findById(req.usuario.id);
        if (funcionarioLogado && funcionarioLogado.clinica) {
            filtro.clinica = funcionarioLogado.clinica;
        } else {
            return res.json([]);
        }
    }

    const prontuarios = await Prontuario.find(filtro)
        .populate('profissional', 'nome') // Popula o nome do profissional
        // ‚úÖ CORRE√á√ÉO: Popula o paciente de forma segura, evitando erros se n√£o existir.
        .populate('paciente', 'nome cpf') 
        .sort({ createdAt: -1 });
    res.json(prontuarios);
  } catch (err) {
    console.error("Erro detalhado ao buscar prontu√°rios:", err); // Log detalhado no servidor
    res.status(500).json({ message: "Erro interno ao buscar prontu√°rios.", error: err.message });
  }
});

// POST: Criar novo prontu√°rio
router.post("/", async (req, res) => {
  try {
    let clinicaId;

    // ‚úÖ CORRE√á√ÉO: Garante que a cl√≠nica seja a do funcion√°rio logado.
    if (req.usuario.perfil === 'funcionario') {
        const funcionarioLogado = await User.findById(req.usuario.id);
        clinicaId = funcionarioLogado?.clinica; // Pega a cl√≠nica do funcion√°rio
    } else {
        // Para o patr√£o, usa a cl√≠nica selecionada no cabe√ßalho.
        clinicaId = req.headers['x-clinic-id'];
        // ‚úÖ CORRE√á√ÉO: Se o patr√£o estiver na "Vis√£o Geral" (sem cl√≠nica selecionada),
        // e um paciente for selecionado, usa a cl√≠nica do paciente para salvar o prontu√°rio.
        if (!clinicaId && req.body.paciente) {
            const paciente = await Paciente.findById(req.body.paciente);
            if (paciente) clinicaId = paciente.clinica;
        }
    }

    if (!clinicaId) return res.status(400).json({ message: "O usu√°rio n√£o est√° associado a nenhuma cl√≠nica." });

    const novoProntuario = new Prontuario({
      ...req.body,
      clinica: clinicaId, // Associa √† cl√≠nica correta.
      profissional: req.usuario.id, // Salva o ID do profissional que criou
      paciente: req.body.paciente // Garante que o ID do paciente seja salvo
    });
    await novoProntuario.save();
    res.status(201).json(novoProntuario);
  } catch (err) {
    console.error("Erro ao criar prontu√°rio:", err);
    res.status(500).json({ message: "Erro ao criar prontu√°rio", error: err.message });
  }
});

// PUT: Atualizar prontu√°rio
router.put("/:id", async (req, res) => {
  try {
    // ‚úÖ IN√çCIO DA VERIFICA√á√ÉO DE SEGURAN√áA
    const prontuario = await Prontuario.findById(req.params.id);
    if (!prontuario) {
      return res.status(404).json({ message: "Prontu√°rio n√£o encontrado." });
    }

    if (req.usuario.perfil === 'funcionario') {
      const funcionarioLogado = await User.findById(req.usuario.id);
      // Verifica se o prontu√°rio pertence √† cl√≠nica do funcion√°rio
      if (prontuario.clinica.toString() !== funcionarioLogado.clinica.toString()) {
        return res.status(403).json({ message: 'Acesso negado. Voc√™ n√£o tem permiss√£o para alterar este prontu√°rio.' });
      }
    }
    // ‚úÖ FIM DA VERIFICA√á√ÉO DE SEGURAN√áA

    const prontuarioAtualizado = await Prontuario.findByIdAndUpdate(
      req.params.id,
      req.body,
      { new: true }
    ).populate('profissional', 'nome'); // Popula o profissional ao retornar

    res.status(200).json(prontuarioAtualizado);
  } catch (err) {
    res.status(400).json({ message: "Erro ao atualizar prontu√°rio", error: err.message });
  }
});

// DELETE: Excluir prontu√°rio
router.delete("/:id", async (req, res) => {
  try {
    // ‚úÖ IN√çCIO DA VERIFICA√á√ÉO DE SEGURAN√áA
    const prontuario = await Prontuario.findById(req.params.id);
    if (!prontuario) {
      return res.status(404).json({ message: "Prontu√°rio n√£o encontrado." });
    }

    if (req.usuario.perfil === 'funcionario') {
      const funcionarioLogado = await User.findById(req.usuario.id);
      if (prontuario.clinica.toString() !== funcionarioLogado.clinica.toString()) {
        return res.status(403).json({ message: 'Acesso negado. Voc√™ n√£o tem permiss√£o para excluir este prontu√°rio.' });
      }
    }
    // ‚úÖ FIM DA VERIFICA√á√ÉO DE SEGURAN√áA

    const prontuarioDeletado = await Prontuario.findByIdAndDelete(req.params.id);
    res.status(200).json({ message: "Prontu√°rio exclu√≠do com sucesso" });
  } catch (err) {
    console.error("Erro ao excluir prontu√°rio:", err);
    res.status(500).json({ message: "Erro ao excluir prontu√°rio", error: err.message });
  }
});

export default router;
