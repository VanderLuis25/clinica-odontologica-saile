// src/context/SystemDataContext.jsx
import React, { createContext, useState, useCallback, useMemo } from "react";
import { apiService } from "../services/api.js"; // 1. Importar o novo apiService

export const SystemDataContext = createContext({});

export const SystemDataProvider = ({ children }) => {
Â  // ---------- Estados Globais ----------
Â  const [financeiro, setFinanceiro] = useState([]);
Â  const [pacientes, setPacientes] = useState([]);
Â  const [procedimentos, setProcedimentos] = useState([]);
  const [profissionais, setProfissionais] = useState([]); // Add state for professionals
Â  const [agendamentos, setAgendamentos] = useState([]);

Â  const [loading, setLoading] = useState({
Â  Â  financeiro: false,
Â  Â  pacientes: false,
Â  Â  procedimentos: false,
    profissionais: false, // Add loading state
Â  Â  agendamentos: false,
Â  });

Â  const [error, setError] = useState({
Â  Â  financeiro: null,
Â  Â  pacientes: null,
Â  Â  procedimentos: null,
    profissionais: null, // Add error state
Â  Â  agendamentos: null,
Â  });

 // ---------- Searchers ----------
 const searchPacientes = useCallback(
    async (query) => {
      try {
        // 2. Usar apiService e extrair `data` da resposta do axios
        const { data } = await apiService.searchPacientes(query);
        return data;
      } catch (err) {
        console.error("Erro ao buscar pacientes:", err);
        return []; // Retorna array vazio em caso de erro
      }
    }, []);

Â  // ---------- Fetchers (Mantidos como estÃ£o) ----------
Â  const fetchFinanceiro = useCallback(async () => {
Â  Â  setLoading((prev) => ({ ...prev, financeiro: true }));
Â  Â  try {
Â  Â  Â  const { data } = await apiService.getFinanceiro();
Â  Â  Â  setFinanceiro(data || []);
Â  Â  Â  setError((prev) => ({ ...prev, financeiro: null }));
Â  Â  } catch (err) {
Â  Â  Â  console.error("Erro financeiro:", err);
Â  Â  Â  setError((prev) => ({ ...prev, financeiro: err.message }));
Â  Â  } finally {
Â  Â  Â  setLoading((prev) => ({ ...prev, financeiro: false }));
Â  Â  }
Â  }, []);

Â  const fetchPacientes = useCallback(async () => {
Â  Â  setLoading((prev) => ({ ...prev, pacientes: true }));
Â  Â  try {
Â  Â  Â  const { data } = await apiService.getPacientes();
Â  Â  Â  setPacientes(data || []);
Â  Â  Â  setError((prev) => ({ ...prev, pacientes: null }));
Â  Â  } catch (err) {
Â  Â  Â  console.error("Erro pacientes:", err);
Â  Â  Â  setError((prev) => ({ ...prev, pacientes: err.message }));
Â  Â  } finally {
Â  Â  Â  setLoading((prev) => ({ ...prev, pacientes: false }));
Â  Â  }
Â  }, []);

Â  const fetchProcedimentos = useCallback(async () => {
Â  Â  setLoading((prev) => ({ ...prev, procedimentos: true }));
Â  Â  try {
Â  Â  Â  const { data } = await apiService.getProcedimentos();
Â  Â  Â  setProcedimentos(data || []);
Â  Â  Â  setError((prev) => ({ ...prev, procedimentos: null }));
Â  Â  } catch (err) {
Â  Â  Â  console.error("Erro procedimentos:", err);
Â  Â  Â  setError((prev) => ({ ...prev, procedimentos: err.message }));
Â  Â  } finally {
Â  Â  Â  setLoading((prev) => ({ ...prev, procedimentos: false }));
Â  Â  }
Â  }, []);

Â  const fetchAgendamentos = useCallback(async () => {
Â  Â  setLoading((prev) => ({ ...prev, agendamentos: true }));
Â  Â  try {
Â  Â  Â  const { data } = await apiService.getAgendamentos();
Â  Â  Â  setAgendamentos(data || []);
Â  Â  Â  setError((prev) => ({ ...prev, agendamentos: null }));
Â  Â  } catch (err) {
Â  Â  Â  console.error("Erro agendamentos:", err);
Â  Â  Â  setError((prev) => ({ ...prev, agendamentos: err.message }));
Â  Â  } finally {
Â  Â  Â  setLoading((prev) => ({ ...prev, agendamentos: false }));
Â  Â  }
Â  }, []);

Â  const fetchProfissionais = useCallback(async () => {
Â  Â  setLoading((prev) => ({ ...prev, profissionais: true }));
Â  Â  try {
Â  Â  Â  const { data } = await apiService.getProfissionais();
Â  Â  Â  setProfissionais(data || []);
Â  Â  Â  setError((prev) => ({ ...prev, profissionais: null }));
Â  Â  } catch (err) {
Â  Â  Â  console.error("Erro ao buscar profissionais:", err);
Â  Â  Â  setError((prev) => ({ ...prev, profissionais: err.message }));
Â  Â  } finally {
Â  Â  Â  setLoading((prev) => ({ ...prev, profissionais: false }));
Â  Â  }
Â  }, []);

Â  const fetchResumo = useCallback(async () => {
Â  Â  await fetchPacientes();
Â  Â  await fetchProcedimentos();
Â  Â  await fetchAgendamentos();
Â  }, [fetchPacientes, fetchProcedimentos, fetchAgendamentos]);

Â  // ---------- Financeiro (LÃ³gica de atualizaÃ§Ã£o ajustada) ----------
Â  const createFinanceiro = useCallback(
Â  Â  async (novoRegistro) => {
Â  Â  Â  try {
Â  Â  Â  Â  const { data: registroSalvo } = await apiService.createFinanceiro(novoRegistro);
        // ðŸš¨ MUDANÃ‡A: Em vez de atualizar o estado local, recarrega do servidor
        // Isso garante que o status (e outros campos) retornado seja exibido.
Â  Â  Â  Â  await fetchFinanceiro(); 
Â  Â  Â  Â  return registroSalvo;
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Erro ao cadastrar registro financeiro:", err);
Â  Â  Â  Â  throw err;
Â  Â  Â  }
Â  Â  },
Â  Â  [fetchFinanceiro] // Adicionado fetchFinanceiro Ã s dependÃªncias
Â  );

Â  const updateFinanceiro = useCallback(
Â  Â  async (id, dados) => {
Â  Â  Â  try {
Â  Â  Â  Â  const { data: registroAtualizado } = await apiService.updateFinanceiro(id, dados);
        // MantÃ©m a recarga para refletir a atualizaÃ§Ã£o do status
Â  Â  Â  Â  await fetchFinanceiro(); 
Â  Â  Â  Â  return registroAtualizado;
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Erro ao atualizar registro financeiro:", err);
Â  Â  Â  Â  throw err;
Â  Â  Â  }
Â  Â  },
Â  Â  [fetchFinanceiro]
Â  );

Â  const deleteFinanceiro = useCallback(
Â  Â  async (id) => {
Â  Â  Â  try {
Â  Â  Â  Â  await apiService.deleteFinanceiro(id);
        // MantÃ©m a atualizaÃ§Ã£o local otimizada para remoÃ§Ã£o
Â  Â  Â  Â  setFinanceiro((prev) => prev.filter((f) => f._id !== id));
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Erro ao deletar registro financeiro:", err);
Â  Â  Â  Â  throw err;
Â  Â  Â  }
Â  Â  }, []
Â  );
    
    // ---------- Agendamentos ----------
    const createAgendamento = useCallback(
      async (novoAgendamento) => {
        try {
          const { data: agendamentoSalvo } = await apiService.createAgendamento(novoAgendamento);
          // Recarrega a lista para garantir consistÃªncia, especialmente com dados populados
          await fetchAgendamentos();
          return agendamentoSalvo;
        } catch (err) {
          console.error("Erro ao criar agendamento:", err);
          throw err;
        }
      },
      [fetchAgendamentos]
    );

    const updateAgendamento = useCallback(
      async (id, dados) => {
        try {
          const { data: agendamentoAtualizado } = await apiService.updateAgendamento(id, dados);
          await fetchAgendamentos();
          return agendamentoAtualizado;
        } catch (err) {
          console.error("Erro ao atualizar agendamento:", err);
          throw err;
        }
      },
      [fetchAgendamentos]
    );

    const deleteAgendamento = useCallback(
      async (id) => {
        await apiService.deleteAgendamento(id);
        // A atualizaÃ§Ã£o via socket.io jÃ¡ vai chamar o fetchAgendamentos,
        // mas podemos manter uma atualizaÃ§Ã£o local para feedback imediato.
        setAgendamentos((prev) => prev.filter((ag) => ag._id !== id));
      }, []
    );

    // As outras funÃ§Ãµes (Procedimentos e Pacientes) foram mantidas como vocÃª enviou
    // pois a questÃ£o era especÃ­fica sobre o status financeiro.

Â  // ---------- Procedimentos ----------
Â  const updateProcedimento = useCallback(
Â  Â  async (id, dados) => {
Â  Â  Â  try {
Â  Â  Â  Â  const { data: procedimentoAtualizado } = await apiService.updateProcedimento(id, dados);
Â  Â  Â  Â  await fetchProcedimentos();
Â  Â  Â  Â  return procedimentoAtualizado;
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Erro ao atualizar procedimento:", err);
Â  Â  Â  Â  throw err;
Â  Â  Â  }
Â  Â  },
Â  Â  [fetchProcedimentos]
Â  );

Â  // ---------- Pacientes ----------
Â  const createPaciente = useCallback(
Â  Â  async (novoPaciente) => {
Â  Â  Â  try {
        // 1. Pega o ID da clÃ­nica do usuÃ¡rio logado
        const clinicaId = localStorage.getItem("clinicaId");
        // 2. Adiciona o ID da clÃ­nica aos dados do novo paciente
        const dadosCompletos = { ...novoPaciente, clinica: clinicaId };

Â  Â  Â  Â  const { data: pacienteSalvo } = await apiService.createPaciente(dadosCompletos);
Â  Â  Â  Â  setPacientes((prev) => [...prev, pacienteSalvo]); // Atualiza o estado local
Â  Â  Â  Â  return pacienteSalvo; // Retorna o paciente salvo
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Erro ao cadastrar paciente:", err);
Â  Â  Â  Â  throw err;
Â  Â  Â  }
Â  Â  }, []
Â  );

Â  const updatePaciente = useCallback(
Â  Â  async (id, dados) => {
Â  Â  Â  try {
Â  Â  Â  Â  const { data: pacienteAtualizado } = await apiService.updatePaciente(id, dados);
Â  Â  Â  Â  await fetchPacientes();
Â  Â  Â  Â  return pacienteAtualizado;
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Erro ao atualizar paciente:", err);
Â  Â  Â  Â  throw err;
Â  Â  Â  }
Â  Â  },
Â  Â  [fetchPacientes]
Â  );

Â  const deletePaciente = useCallback(
Â  Â  async (id) => {
Â  Â  Â  try {
Â  Â  Â  Â  await apiService.deletePaciente(id);
Â  Â  Â  Â  setPacientes((prev) => prev.filter((p) => p._id !== id));
Â  Â  Â  } catch (err) {
Â  Â  Â  Â  console.error("Erro ao deletar paciente:", err);
Â  Â  Â  Â  throw err;
Â  Â  Â  }
Â  Â  }, []
Â  );

Â  // ---------- Context Value ----------
Â  const contextValue = useMemo(
Â  Â  () => ({
Â  Â  Â  financeiro,
Â  Â  Â  pacientes,
Â  Â  Â  procedimentos,
      profissionais, // Add state to context
Â  Â  Â  agendamentos,
Â  Â  Â  loading,
Â  Â  Â  error,
Â  Â  Â  fetchFinanceiro,
Â  Â  Â  fetchPacientes,
Â  Â  Â  fetchProcedimentos,
      fetchProfissionais, // Add function to context
Â  Â  Â  fetchAgendamentos,
Â  Â  Â  fetchResumo,
Â  Â  Â  createPaciente,
Â  Â  Â  updatePaciente,
Â  Â  Â  deletePaciente,
Â  Â  Â  createFinanceiro,
Â  Â  Â  updateFinanceiro,
Â  Â  Â  deleteFinanceiro,
      createAgendamento,
      updateAgendamento,
      deleteAgendamento,
      searchPacientes,
Â  Â  Â  updateProcedimento,
Â  Â  }),
Â  Â  [
Â  Â  Â  financeiro,
Â  Â  Â  pacientes,
Â  Â  Â  procedimentos,
      profissionais, // Add to dependency array
Â  Â  Â  agendamentos,
Â  Â  Â  loading,
Â  Â  Â  error,
Â  Â  Â  fetchFinanceiro,
Â  Â  Â  fetchPacientes,
Â  Â  Â  fetchProcedimentos,
      fetchProfissionais, // Add to dependency array
Â  Â  Â  fetchAgendamentos,
Â  Â  Â  fetchResumo,
Â  Â  Â  createPaciente,
Â  Â  Â  updatePaciente,
Â  Â  Â  deletePaciente,
Â  Â  Â  createFinanceiro,
Â  Â  Â  updateFinanceiro,
Â  Â  Â  deleteFinanceiro,
      createAgendamento,
      updateAgendamento,
      deleteAgendamento,
      searchPacientes,
Â  Â  Â  updateProcedimento,
Â  Â  ]
Â  );

Â  return (
Â  Â  <SystemDataContext.Provider value={contextValue}>
Â  Â  Â  {children}
Â  Â  </SystemDataContext.Provider>
Â  );
};